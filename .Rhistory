col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
'I hate Mao Mao'
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = 'num',
label = 'Choose a number',
value = 25, min = 1, max = 100),
plotOutput('hist')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$sum))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = 'num',
label = 'Choose a number',
value = 25, min = 1, max = 100),
plotOutput('hist')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
3 %% 1
for (i in 2:10){
a <- i
sum <- 0
worst <- 100
worstb <- 0
for (j in 1:i-1){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>worst){
worst <- count
worstb <- j
}
sum <- sum + count
}
result <- c(worst,sum/(i-1))
print(result)
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- 0
for (j in 1:i-1){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>worst){
worst <- count
worstb <- j
}
sum <- sum + count
}
result <- c(worst,sum/(i-1))
print(result)
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- 0
for (j in 1:i-1){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>worst){
worst <- count
worstb <- j
}
sum <- sum + count
}
result <- c(worst,worstb,sum,(i-1))
print(result)
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- c()
for (j in 1:i-1){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
print(result)
print(worstb)
}
1:5
2:5
1:10
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- c()
for (j in 1:i-1){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
print worstb
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- c()
for (j in 1:i-1){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
print(worstb)
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
}
a <- c(2,5)
a <- c()
a
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 1:i-1){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
print(worstb)
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 1:i-1){
print(j)
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 2:i-1){
print(j)
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
}
for (i in 2:10){
print(i)
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 2:i-1){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 1:i-1){
print(j)
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 1:(i-1)){
print(j)
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 1:(i-1)){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>=worst){
worst <- count
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
print(result)
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 1:(i-1)){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>worst){
worst <- count
worstb <- c(j)
}
if (count==worst){
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
print(result)
print worstb
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 1:(i-1)){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>worst){
worst <- count
worstb <- c(j)
}
if (count==worst){
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
print(result)
print(worstb)
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 1:(i-1)){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>worst){
worst <- count
worstb <- j
}
if (count==worst){
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
print(result)
print(worstb)
}
for (i in 2:10){
a <- i
sum <- 0
worst <- 0
worstb <- NULL
for (j in 1:(i-1)){
b <- j
count <- 0
while (b!=0){
count <- count + 1
b <- a %% b
}
if (count>worst){
worst <- count
worstb <- j
}
else if (count==worst){
worstb <- c(worstb,j)
}
sum <- sum + count
}
result <- c(worst,sum,(i-1))
print(result)
print(worstb)
}
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
?checkboxGroupInput
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
?sliderInput
shiny::runApp('Desktop/SMART/datastories')
?selectInput
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
?selectInput
?checkboxInput
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
?dyLimit
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
?tabBox
?tabPanel
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
shiny::runApp('Desktop/SMART/datastories')
library(ramazon)
ramazon(Public_DNS='ec2-52-23-241-92.compute-1.amazonaws.com',key_pair_name='final')
setwd("~/Desktop/SMART/datastories")
ramazon(Public_DNS='ec2-52-23-241-92.compute-1.amazonaws.com',key_pair_name='final')
library(ramazon)
ramazon(Public_DNS='ec2-52-23-241-92.compute-1.amazonaws.com',key_pair_name='final')
library(shiny)
library(ramazon)
ramazon(Public_DNS='ec2-52-23-241-92.compute-1.amazonaws.com',key_pair_name='final')
library(ramazon)
ramazon(Public_DNS='ec2-52-23-241-92.compute-1.amazonaws.com',key_pair_name='final')
