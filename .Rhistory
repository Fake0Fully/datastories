stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10))
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.1)
setb <- seq(0,0.1,by=0.001)
for (a in 1:101){
for (b in 1:101){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
if (diff[a,b]==FALSE){
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='b')
?plot
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.1)
setb <- seq(0,0.1,by=0.001)
for (a in 1:101){
for (b in 1:101){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
if (diff[a,b]==FALSE){
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.1)
setb <- seq(0,0.1,by=0.001)
for (a in 1:101){
for (b in 1:101){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
if (diff[a,b]==FALSE){
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
plot(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.1)
setb <- seq(0,0.1,by=0.001)
for (a in 1:101){
for (b in 1:101){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
if (diff[a,b]==FALSE){
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.1)
setb <- seq(0,0.1,by=0.001)
for (a in 1:101){
for (b in 1:101){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.1)
setb <- seq(0,0.1,by=0.001)
for (a in 1:101){
for (b in 1:101){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
print('a')
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
seq(-10,10,by=0.1)
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.2)
setb <- seq(0,0.1,by=0.001)
for (a in 1:101){
for (b in 1:101){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.2)
setb <- seq(0,0.1,by=0.01)
for (a in 1:101){
for (b in 1:11){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
View(actual)
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-100,100,by=2)
setb <- seq(0,0.1,by=0.01)
for (a in 1:101){
for (b in 1:11){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-100,100,by=2)
setb <- seq(0,0.1,by=0.01)
for (a in 1:101){
for (b in 1:11){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-100,100),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-100,100),col='red')
View(stab)
data(diamonds)
data(diamonds)
library(ggplot2)
library(GGally)
library(scales)
library(lattice)
library(memisc)
library(MASS)
library(lattice)
library(memisc)
data(diamonds)
plot1 <- qplot(data=diamonds,x=price,binwidth=100,fill=I('blue'))+
ggtitle("price")
plot2 <- qplot(data=diamonds,x=price,binwidth=0.01,fill=I('orange'))+
ggtitle('price (log10)')
plot1 <- qplot(data=diamonds,x=price,binwidth=100,fill=I('blue'))+
ggtitle("price")
plot2 <- qplot(data=diamonds,x=price,binwidth=0.01,fill=I('orange'))+
ggtitle('price (log10)')+
scale_x_log10
plot2 <- qplot(data=diamonds,x=price,binwidth=0.01,fill=I('orange'))+
ggtitle('price (log10)')+
scale_x_log10()
library(gridExtra)
grid.arrange(plot1,plot2,ncol=2)
qplot(carat,price,data=diamonds)+
scale_y_continous(trans=log10_trans())+
ggtitle('Price (log10) by Carat')
qplot(carat,price,data=diamonds)+
scale_y_continuous(trans=log10_trans())+
ggtitle('Price (log10) by Carat')
ggplot(aes(x=carat,y=price),data=diamonds)+
geom_point(color='orange',alpha=1/4)+
stat_smooth(method='lm')+
scale_x_continuous(lim=c(0,quantile(diamonds$carat,0.99)))+
scale_y_continuous(lim=c(0,quantile(diamonds$price,0.99)))
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat,price),data=diamonds)+
geom_points()+
scale_x_continuous(trans=cuberoot_trans(),limits=c(0.2,3),
breaks=c(0.2,0.5,1,2,3))+
scale_y_continuous(trans=log10_trans(),limits=c(350,15000),
breaks=c(350,1000,5000,10000,15000))
ggplot(aes(carat,price),data=diamonds)+
geom_point()+
scale_x_continuous(trans=cuberoot_trans(),limits=c(0.2,3),
breaks=c(0.2,0.5,1,2,3))+
scale_y_continuous(trans=log10_trans(),limits=c(350,15000),
breaks=c(350,1000,5000,10000,15000))
table(diamonds$carat)
head(sort(table(diamonds$carat),decreasing=T))
head(sort(table(diamonds$price),decreasing=T))
table(diamonds$carat)
sort(table(diamonds$carat))
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
install.packages('shiny')
library(shiny)
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
'I hate Mao Mao'
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = 'num',
label = 'Choose a number',
value = 25, min = 1, max = 100),
plotOutput('hist')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$sum))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = 'num',
label = 'Choose a number',
value = 25, min = 1, max = 100),
plotOutput('hist')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/SMART(FM)/datastories')
shiny::runApp('Desktop/SMART(FM)/datastories')
shiny::runApp('Desktop/SMART(FM)/datastories')
?sidebarMenu
?dashboardSidebar
install.packages('devtools')
library(devtools)
install_github("andreacirilloac/ramazon")
library(ramazon)
ramazon(public_DNS="ec2-52-43-251-41.us-west-2.compute.amazonaws.com
",key_pair_name="ziqi")
ramazon(public_DNS="ec2-52-43-251-41.us-west-2.compute.amazonaws.com",key_pair_name = "ziqi")
setwd("~/Desktop/SMART(FM)/datastories")
ramazon(public_DNS="ec2-52-43-251-41.us-west-2.compute.amazonaws.com",key_pair_name = "ziqi")
ramazon(public_DNS="ec2-52-43-251-41.us-west-2.compute.amazonaws.com",key_pair_name = "ziqi")
ramazon(public_DNS="ec2-52-43-251-41.us-west-2.compute.amazonaws.com",key_pair_name = "ziqi")
?ramazon
ramazon(public_DNS="ec2-52-43-251-41.us-west-2.compute.amazonaws.com",key_pair_name = "ziqi.pem")
wd
ramazon()
ramazon(public_DNS="ec2-52-43-251-41.us-west-2.compute.amazonaws.com",key_pair_name = "ziqi")
ramazon(Public_DNS="ec2-52-43-251-41.us-west-2.compute.amazonaws.com",key_pair_name = "ziqi")
ramazon(Public_DNS = "ec2-52-27-229-28.us-west-2.compute.amazonaws.com",key_pair_name = "newkey")
library(ramazon)
ramazon(Public_DNS = "ec2-52-27-229-28.us-west-2.compute.amazonaws.com",key_pair_name = "newkey")
dat <- read.csv('data/merged.csv')
names(northp)
names(dat)
View(tamp_retailers)
View(dat)
shiny::runApp()
