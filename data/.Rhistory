xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.1)
setb <- seq(0,0.1,by=0.001)
for (a in 1:101){
for (b in 1:101){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
print('a')
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
seq(-10,10,by=0.1)
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.2)
setb <- seq(0,0.1,by=0.001)
for (a in 1:101){
for (b in 1:101){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-10,10,by=0.2)
setb <- seq(0,0.1,by=0.01)
for (a in 1:101){
for (b in 1:11){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
View(actual)
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-100,100,by=2)
setb <- seq(0,0.1,by=0.01)
for (a in 1:101){
for (b in 1:11){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-10,10),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-10,10),col='red')
stab <- data.frame(0)
diff <- data.frame(0)
actual <- data.frame(0)
y0 <- 1
h <- c()
lambda <- c()
xx <- c()
yy <- c()
seta <- seq(-100,100,by=2)
setb <- seq(0,0.1,by=0.01)
for (a in 1:101){
for (b in 1:11){
y <- y0
y <- y +setb[b]*seta[a]*y
stab[a,b] <- y>y0
actual[a,b] <- (y0*exp(seta[a]*setb[b]))>y0
diff[a,b] <- stab[a,b]==actual[a,b]
if (diff[a,b]==TRUE){
lambda <- c(lambda,seta[a])
h <- c(h,setb[b])
}
else{
yy <- c(yy,seta[a])
xx <- c(xx,setb[b])
}
}}
plot(h,lambda,xlim=c(0,0.1),ylim=c(-100,100),col='blue')
points(xx,yy,xlim=c(0,0.1),ylim=c(-100,100),col='red')
View(stab)
data(diamonds)
data(diamonds)
library(ggplot2)
library(GGally)
library(scales)
library(lattice)
library(memisc)
library(MASS)
library(lattice)
library(memisc)
data(diamonds)
plot1 <- qplot(data=diamonds,x=price,binwidth=100,fill=I('blue'))+
ggtitle("price")
plot2 <- qplot(data=diamonds,x=price,binwidth=0.01,fill=I('orange'))+
ggtitle('price (log10)')
plot1 <- qplot(data=diamonds,x=price,binwidth=100,fill=I('blue'))+
ggtitle("price")
plot2 <- qplot(data=diamonds,x=price,binwidth=0.01,fill=I('orange'))+
ggtitle('price (log10)')+
scale_x_log10
plot2 <- qplot(data=diamonds,x=price,binwidth=0.01,fill=I('orange'))+
ggtitle('price (log10)')+
scale_x_log10()
library(gridExtra)
grid.arrange(plot1,plot2,ncol=2)
qplot(carat,price,data=diamonds)+
scale_y_continous(trans=log10_trans())+
ggtitle('Price (log10) by Carat')
qplot(carat,price,data=diamonds)+
scale_y_continuous(trans=log10_trans())+
ggtitle('Price (log10) by Carat')
ggplot(aes(x=carat,y=price),data=diamonds)+
geom_point(color='orange',alpha=1/4)+
stat_smooth(method='lm')+
scale_x_continuous(lim=c(0,quantile(diamonds$carat,0.99)))+
scale_y_continuous(lim=c(0,quantile(diamonds$price,0.99)))
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat,price),data=diamonds)+
geom_points()+
scale_x_continuous(trans=cuberoot_trans(),limits=c(0.2,3),
breaks=c(0.2,0.5,1,2,3))+
scale_y_continuous(trans=log10_trans(),limits=c(350,15000),
breaks=c(350,1000,5000,10000,15000))
ggplot(aes(carat,price),data=diamonds)+
geom_point()+
scale_x_continuous(trans=cuberoot_trans(),limits=c(0.2,3),
breaks=c(0.2,0.5,1,2,3))+
scale_y_continuous(trans=log10_trans(),limits=c(350,15000),
breaks=c(350,1000,5000,10000,15000))
table(diamonds$carat)
head(sort(table(diamonds$carat),decreasing=T))
head(sort(table(diamonds$price),decreasing=T))
table(diamonds$carat)
sort(table(diamonds$carat))
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
install.packages('shiny')
library(shiny)
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
'I hate Mao Mao'
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
# 01-kmeans-app
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
library(shiny)
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = 'num',
label = 'Choose a number',
value = 25, min = 1, max = 100),
plotOutput('hist')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$sum))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = 'num',
label = 'Choose a number',
value = 25, min = 1, max = 100),
plotOutput('hist')
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop/SMART/datastories')
dat <- read.csv('data/merged.csv',stringsAsFactors = FALSE, header=T)
dat[,"entry_time"] <- as.POSIXct(dat[,"entry_time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
dat[,"exit_time"] <- as.POSIXct(dat[,"exit_time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
input_date <- c('2015-06-24','2015-06-25','2015-06-26')
input_time <- c('6:00:00','18:00:00')
input_interval <- 50
parking <- c('street')
temp <- dat
temp <- subset(temp, temp$date %in% input_date)
temp <- subset(temp, hour(temp$entry_time)>=6&hour(temp$entry_time)<=18)
temp <- temp[!is.na(temp[,"entry_time"]) & !is.na(temp[,"exit_time"]),c("park_location", "entry_time", "exit_time", "dtime")]
if (!is.null(parking)){
temp <- subset(temp,temp$park_location %in% parking)
}
entries <- data.frame(cbind(as.character(temp[,"entry_time"]), rep(1,length(temp[,"entry_time"]))), stringsAsFactors=F)
exits <- data.frame(cbind(as.character(temp[,"exit_time"]), rep(-1,length(temp[,"exit_time"]))), stringsAsFactors=F)
no_agents <- rbind(entries, exits)
names(no_agents)[1] <- "time"
no_agents[,"time"] <- as.POSIXct(no_agents[,"time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
no_agents <- no_agents[order(no_agents[,"time"] ),]
while (max(table(no_agents[,"time"])) >1) {
for (i in 2:(nrow(no_agents)-1)) if (no_agents[i,"time"]==no_agents[i-1,"time"]) no_agents[i,"time"] <- no_agents[i,"time"]+1
no_agents <- no_agents[order(no_agents[,"time"] ),]
}
no_agents[,2] <- as.numeric(no_agents[,2])
no_agents[,3] <- NA
no_agents[1,3] <- no_agents[1,2]
for (j in 2:nrow(no_agents)) no_agents[j,3] <- no_agents[j-1,3]+no_agents[j,2]
no_agents <- no_agents[,c(1,3)]
names(no_agents) <- c('time','number')
no_agents[,"time"] <- as.POSIXct(no_agents[,"time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
arrivals_table <- data.frame(rep(NA,
length(seq(from = as.POSIXct(paste(input_date[1], input_time[1]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
to = as.POSIXct(paste(input_date[1], input_time[2]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
by=1))))
names(arrivals_table) <- 'time'
for (i in 1:length(input_date)) {
arrivals_table[,1] <- as.POSIXct(seq(from = as.POSIXct(paste(input_date[i], input_time[1]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
to = as.POSIXct(paste(input_date[i], input_time[2]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
by=1), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
arrivals_table <- merge(arrivals_table,no_agents,by='time',all.x=TRUE)
arrivals_table[1,i+1] <- 0
arrivals_table[i+1] <- na.locf(arrivals_table[i+1])
}
rownames(arrivals_table) <- as.POSIXct(arrivals_table[,1],format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
names(arrivals_table) <- c("aaa", format(as.Date(input_date, tz="Asia/Singapore"), format="%B %d %Y"))
arrivals_table <- as.xts(arrivals_table)
arrivals_table <- arrivals_table[,-1]
title_plot <- paste("Number of arrivals per", "minute intervals")
dygraph(arrivals_table, main=title_plot) %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyLegend(labelsSeparateLines=T, width=170) %>%
dyAxis("y", label="No. vehicles observed") %>%
dyAxis("x", label="Start of interval") %>%
dyOptions(useDataTimezone = F)
setwd("~/Desktop/SMART/datastories")
dat <- read.csv('data/merged.csv',stringsAsFactors = FALSE, header=T)
dat[,"entry_time"] <- as.POSIXct(dat[,"entry_time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
dat[,"exit_time"] <- as.POSIXct(dat[,"exit_time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
input_date <- c('2015-06-24','2015-06-25','2015-06-26')
input_time <- c('6:00:00','18:00:00')
input_interval <- 50
parking <- c('street')
temp <- dat
temp <- subset(temp, temp$date %in% input_date)
temp <- subset(temp, hour(temp$entry_time)>=6&hour(temp$entry_time)<=18)
temp <- temp[!is.na(temp[,"entry_time"]) & !is.na(temp[,"exit_time"]),c("park_location", "entry_time", "exit_time", "dtime")]
if (!is.null(parking)){
temp <- subset(temp,temp$park_location %in% parking)
}
entries <- data.frame(cbind(as.character(temp[,"entry_time"]), rep(1,length(temp[,"entry_time"]))), stringsAsFactors=F)
exits <- data.frame(cbind(as.character(temp[,"exit_time"]), rep(-1,length(temp[,"exit_time"]))), stringsAsFactors=F)
no_agents <- rbind(entries, exits)
names(no_agents)[1] <- "time"
no_agents[,"time"] <- as.POSIXct(no_agents[,"time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
no_agents <- no_agents[order(no_agents[,"time"] ),]
while (max(table(no_agents[,"time"])) >1) {
for (i in 2:(nrow(no_agents)-1)) if (no_agents[i,"time"]==no_agents[i-1,"time"]) no_agents[i,"time"] <- no_agents[i,"time"]+1
no_agents <- no_agents[order(no_agents[,"time"] ),]
}
no_agents[,2] <- as.numeric(no_agents[,2])
no_agents[,3] <- NA
no_agents[1,3] <- no_agents[1,2]
for (j in 2:nrow(no_agents)) no_agents[j,3] <- no_agents[j-1,3]+no_agents[j,2]
no_agents <- no_agents[,c(1,3)]
names(no_agents) <- c('time','number')
no_agents[,"time"] <- as.POSIXct(no_agents[,"time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
arrivals_table <- data.frame(rep(NA,
length(seq(from = as.POSIXct(paste(input_date[1], input_time[1]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
to = as.POSIXct(paste(input_date[1], input_time[2]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
by=1))))
names(arrivals_table) <- 'time'
for (i in 1:length(input_date)) {
arrivals_table[,1] <- as.POSIXct(seq(from = as.POSIXct(paste(input_date[i], input_time[1]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
to = as.POSIXct(paste(input_date[i], input_time[2]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
by=1), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
arrivals_table <- merge(arrivals_table,no_agents,by='time',all.x=TRUE)
arrivals_table[1,i+1] <- 0
arrivals_table[i+1] <- na.locf(arrivals_table[i+1])
}
rownames(arrivals_table) <- as.POSIXct(arrivals_table[,1],format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
names(arrivals_table) <- c("aaa", format(as.Date(input_date, tz="Asia/Singapore"), format="%B %d %Y"))
arrivals_table <- as.xts(arrivals_table)
arrivals_table <- arrivals_table[,-1]
title_plot <- paste("Number of arrivals per", "minute intervals")
dygraph(arrivals_table, main=title_plot) %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyLegend(labelsSeparateLines=T, width=170) %>%
dyAxis("y", label="No. vehicles observed") %>%
dyAxis("x", label="Start of interval") %>%
dyOptions(useDataTimezone = F)
dat <- read.csv('data/merged.csv',stringsAsFactors = FALSE, header=T)
dat[,"entry_time"] <- as.POSIXct(dat[,"entry_time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
dat[,"exit_time"] <- as.POSIXct(dat[,"exit_time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
input_date <- c('2015-06-24','2015-06-25','2015-06-26')
input_time <- c('6:00:00','18:00:00')
input_interval <- 50
parking <- NULL
temp <- dat
temp <- subset(temp, temp$date %in% input_date)
temp <- subset(temp, hour(temp$entry_time)>=6&hour(temp$entry_time)<=18)
temp <- temp[!is.na(temp[,"entry_time"]) & !is.na(temp[,"exit_time"]),c("park_location", "entry_time", "exit_time", "dtime")]
if (!is.null(parking)){
temp <- subset(temp,temp$park_location %in% parking)
}
entries <- data.frame(cbind(as.character(temp[,"entry_time"]), rep(1,length(temp[,"entry_time"]))), stringsAsFactors=F)
exits <- data.frame(cbind(as.character(temp[,"exit_time"]), rep(-1,length(temp[,"exit_time"]))), stringsAsFactors=F)
no_agents <- rbind(entries, exits)
names(no_agents)[1] <- "time"
no_agents[,"time"] <- as.POSIXct(no_agents[,"time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
no_agents <- no_agents[order(no_agents[,"time"] ),]
while (max(table(no_agents[,"time"])) >1) {
for (i in 2:(nrow(no_agents)-1)) if (no_agents[i,"time"]==no_agents[i-1,"time"]) no_agents[i,"time"] <- no_agents[i,"time"]+1
no_agents <- no_agents[order(no_agents[,"time"] ),]
}
no_agents[,2] <- as.numeric(no_agents[,2])
no_agents[,3] <- NA
no_agents[1,3] <- no_agents[1,2]
for (j in 2:nrow(no_agents)) no_agents[j,3] <- no_agents[j-1,3]+no_agents[j,2]
no_agents <- no_agents[,c(1,3)]
names(no_agents) <- c('time','number')
no_agents[,"time"] <- as.POSIXct(no_agents[,"time"], format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
arrivals_table <- data.frame(rep(NA,
length(seq(from = as.POSIXct(paste(input_date[1], input_time[1]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
to = as.POSIXct(paste(input_date[1], input_time[2]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
by=1))))
names(arrivals_table) <- 'time'
for (i in 1:length(input_date)) {
arrivals_table[,1] <- as.POSIXct(seq(from = as.POSIXct(paste(input_date[i], input_time[1]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
to = as.POSIXct(paste(input_date[i], input_time[2]), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore"),
by=1), format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
arrivals_table <- merge(arrivals_table,no_agents,by='time',all.x=TRUE)
arrivals_table[1,i+1] <- 0
arrivals_table[i+1] <- na.locf(arrivals_table[i+1])
}
rownames(arrivals_table) <- as.POSIXct(arrivals_table[,1],format="%Y-%m-%d %H:%M:%S", tz="Asia/Singapore")
names(arrivals_table) <- c("aaa", format(as.Date(input_date, tz="Asia/Singapore"), format="%B %d %Y"))
arrivals_table <- as.xts(arrivals_table)
arrivals_table <- arrivals_table[,-1]
title_plot <- paste("Number of arrivals per", "minute intervals")
dygraph(arrivals_table, main=title_plot) %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %>%
dyLegend(labelsSeparateLines=T, width=170) %>%
dyAxis("y", label="No. vehicles observed") %>%
dyAxis("x", label="Start of interval") %>%
dyOptions(useDataTimezone = F)
>>>>>>> origin/master
shiny::runApp()
shiny::runApp()
setwd("/Users/giacomodc/Dropbox/PhD/datastories/data")
malls <- read.csv("shopping_malls.csv", stringsAsFactors = F, header=T)
str(malls)
summary(malls$no_stores_mallwebsite)
